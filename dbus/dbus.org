learning D-Bus
* What is D-Bus
  D-Bus is a system for interprocess communication(IPC). It has several layers:
    - A library.
    - A message bus daemon executable, built on libdbus, that multiple applications can connect to.
    - Wrapper libraries or bindings based on particular application frameworks.

  Libdbus only supports one-to-one connections, just like a raw network socket. However, rather than sending byte streams over the connection, you sen messages. Messages have a header identifying the kind of message, and a body containing a data payload. libdbus also abstracts the exact transport used(sockets vs. whatever else), and handles details such as authentication.

      The message bus daemon forms the hub of a whell. Each spoke of the whell is a one-to -one connection to an application using libdbus. A application sends a message to the bus daemon over its spoke, and the bus daemon forwards the message to other connected applications as appropriate. Think of the demon as a router.

      The bus daemon has multiple instances on a typical computer. The first instance is a machine-global sigleton, that is, a system daemon similar to sendmail or Apache. This instance has heavy security restrictions on what messages it will accept, and is used for systemwide communication. The other instances are created one per user login session. These instances allow applications in the user's session to communicate with one another.

      The systemwide and per-user daemons are separate. Normal within-session IPC does not involve the systemwide message bus process and vice versa.

** D-Bus applications
   D-Bus is designed for two specific cases:
     - Communication between desktop applications in the same desktop session; to allow intgration of the desktop session as a whole, and address isssues of process lifecycle (when do desktop components start and stop running).
     - Communication between the desktop session and the operationg system, where the operating system would typically include the kernel and any system daemons or processes.

   D-Bus may or may not be appropriate for other applications; the FAQ has some comparisons to other IPC systems.

   D-Bus may happen to be useful for purposes other than the one it was designed for. Its general properties that distinguish it from other forms of IPC are:
     - Binary protocol designed to be used asynchronously (similar in spirit to the X Window System protocol).
     - Stateful, reliable connections held open over time.
     - The message bus is a daemon, not a "swarm" or distributed architecture.
     - Many implementation and deployment issues are specified rather than left ambiguous/configurable/pluggable.
     - Semantics are similar to the existing DCOP system, allowing KDE to adopt it more easily.
     - Security features to support the systemwide mode of the message bus.
* Concepts
  Some basic concepts apply no matter what application framework you're using to write a D-Bus application.
** Native Objects and Object Paths
   Your programming framework probably defines what an "object" is like; usually with a base class. Let's call this a native object.

   The low-levvel D-Bus protocol, and corresponding libdbus API, does not care about native objects. However, it provides a concept called an object path. The idea of an object path is that higher-level bindings can name native object instances, and allow remote application to refer to them.

   The object path looks like a filesystem path, for example an object could be named /org/kde/dspread/sheets/3/cells/4/5. Human-readable path are nice, but you are free to create an object named /com/mycompany/ca14123fadf if it makes sense for you application.

   Namespaceing object paths is smart, by starting them with the components of a domain name you own(e.g. /org/kde). This keeps different code modules in the same process from stepping on one another's toes.
** Methods and Signals
   Each object has members; the two kinds of member are methods and signals. Methods are operations that can be invoked on an object, with optional input (aka arguments or "in parameters") and output (aka return values or "out parameters"). Signals are broadcasts from the object to any interested observers of the object; signals may contain a data payload.

   Both methods and signals are referred to by name, such as "Frobate" or "OnClicked".

** Interfaces
   Each object supports one or more interfaces. Think of an interface as a named group of methods and signals, just as it is in GLib or Qt or Java. Interfaces define the type of an object instance.

   DBus identifies interfaces with a simple namespaced string, something like org.freedesktop.Introspectable. Most bindings will map these interface names directly to the appropriate programming language construct, for example to Java interfaces or C++ pure virtual classes.

** Proxies
   A proxy object is a convenient native object created to represent a remote object in another process. The low-level DBus API involves manually creating a method call message, sending it, then manually receiving and processing the method reply message. Higher-level bindings provide proxies as an alternative. Proxies look like a normal native object; but when you invoke a method on the proxy object, the binding converts it into a DBus method call message, waits for the reply message, unpacks the return value, and returns it from the native method.

** Bus Names
   When each application connects to the bus daemon, the daemon immediately assigns it a name, called the unique connection name. A unique name begins with a ':'(colon) character. These names are never reused during the lifetime of the bus daemon - that is, you know a given name will always refer to the same apllication. An example of a unique anem might be :34-907. The numbers after the colon have no meaning other than their uinqueness.

   When a name is mapped to a particular application's connection, that application is said to own that name.

   Applications may ask to own additional well-known names. For example, you could write a specification to define a name called com.mycompany.TexEditor. Your definition could specify that to own this name, an application should have an object at the path /com/mycompany/TextFileManager supporting the interface org.freedesktop.FileHandler.

   Applications could then send messages to this bus name, object, and interface to execute method calls.

   You could think of the unique names as IP addresses, and the well-known names as domain names. So com.mycompany.TextEditor might map to something like :34:907 just as mycompany.com maps to something like 192.168.0.5.

   Names have a second important use, other than routing messages. They are used to track lifecycle. When an application exits (or crashes), its connection to the message bus will be closed by the operating system kernel. The message bus then sends out notification messages telling remaining applications that the application's names have lost their owner. By tracking these notifications, your application can reliably monitor the lifetime of other applications.

   Bus names can also be used to coordinate single-instance applications. If you want to be sure only one com.mycompany.TextEditor application is running for example, have the text editor application exit if the bus name already has an owner.
** Addresses
   Applications using D-Bus are either servers or clients. A server listens for incoming connections; a client connects to a server. Once the connection is established, it is a symmetric flow of messages; the client-server distinction only matters when setting up the conection.

   If you're using the bus daemon, as you probably are, you application will be a client of the bus daemon. That is, the bus daemon listens for connections and your application initiates a connecton to the bus daemon.

   A D-Bus address specifies where a server will listen, and where a client will connect.

   When using D-Bus with a message bus daemon, libdbus automaticlly discovers the address of the per-session bus daemon by reading an environment variable. It discovers the systemwide bus daemon by checking a well-know UNIX domain socket path (though you can override this address with an environment variable).

   If you're using D-Bus without a bus daemon, it's up to you to define which application will be the server and which will be the client, and specify a mechanism for them to agree on the server's address. This is an unusualcase.

** Big Conceptual Picture
   Pulling all these concepts together, to specify a particular method call on a particular object instance, a number of nested components have to be named:
   
       Address -> [Bus Name] -> Path -> Interface -> Method

   The bus name is in brackets to indicate that it's optional -- you only provide a name to route the method call to the right application when using the bus daemon. If you have a direct connection to another application, bus names aren't used; there's no bus daemon.

   The interface is also optional, primarily for historical reasons;
** Messages - Behind the Scenes
   D-Bus works by sending messages between processes. If you're using a sufficiently high-level binding, you may never work with messages directly. There are 4 message types:
     - Method call messages ask to invoke a method on an object.
     - Method return messages return the result of invoking a method.
     - Error messages return an exception caused by invoking a method.
     - Signal messages are notifications that a given signal has been emitted (that an event has occurred). You could also think of these as "event" message.

   A method call maps very simply to messages: you send a method call message, and receive either a method return message or an error message in reply.

   Each message has a header, including fields, and a body, including arguments. You can think of the header as the routing information for the message, and the body as the payload. Header fields might include the sender bus name, destination bus name, method or signal name, and so forth. One of the header fields is a type signature describing the values found in the body. For example, the letter "i" means "32-bit integer" so the signature "ii" means the payload has two 32-bit intergers.

** Emitting a Signal - Behind the Scenes
   A signal in DBus consists of a single message, sent by one process to any number of other processes. That is, a  signal is unidirectional broadcast. The signal may contain arguments (a data payload), but because it is a broadcast, it never has a "return value." Contrast this with a method call where the method call cmessage has a matching method reply message.

   The emitter (aka sender) of a signal has no knowledge of the signal recipients. Recipients register with the bus daemon to receive signals based on "match rules" - these rules would typeically include the sender and the signal name. The bus daemon sends each signal only to recipients who have expressed interest in that signal.

   A signal in DBus happens as follows:
     - A signal message is created and sent to the bus 
      
** Introspection
* GLib API: Using Remote Objects
** D-Bus - GLib type mappings
** A sample program
   file:demo/asampleprog.c
** Program initialization
** Understanding method invocation
** Connection to object signals
** Error handling and remote exceptions
** More examples of method invocation
** Generated Bindings
* GLib API: Implementing Objects
** Server-side Annotations
** Python API
* Examples
** a few example uses of D-BUS code
   dbus-ping-send.c sends a signal over the session bus every seconsd with the string "Ping!" as an argument. I'm using GLib to manage the bus so that I don't need to deal with the details of the bus connection myself.

   file:demo/dbus-ping-send.c

   The main function creates a GLib event loop, gets a connection to the session bus, and integrates the D-BUS event handling into the Glib event loop. Then it creates a one-second timer that calls send_ping, and starts the event loop.

   send_ping constructs a new Ping signal, coming from the object path /com/burtonini/dbus/ping and interface com.burtonini.dbus.Signal. Then the string "Ping!" is added as an argument to the signal and sent across the bus. A message is printed on standard output to let the user know a signal was sent.

   Of course, it is not good to fire signals down the bus if there is nothing listening to them... which brings us to:

   file:demo/dbus-ping-listen.c
** 利用python脚本调用ListActivativableNames
   file:demo/dls.py
** 用dbus-glib做一个dbus接口，并写一个客户程序
   首先编写接口描述文件。我们要实现的连接的公共名是"org.freesmartphone.ogsmd"，接口描述文件如下：
   file:demo/smss.xml
** hellodbus-0.1
   解压hello-dbus-0.1.tar.gz后执行clean.sh,得到源码树如下

   .
   ├── autogen.sh
   ├── clean.sh
   ├── configure.ac
   ├── Makefile.am
   └── src
       ├── example-signal-emitter.c
       ├── example-signal-emitter-glue.h
       ├── example-signal-emitter.xml
       ├── example-signal-recipient.c
       └── Makefile.am
  
   我们首先尝试编译运行。

**  基础小例子（同步和异步）
*** 同步的例子
    同步即程序发出method call消息，等待method_return消息。下面是一个小例子，如果我们用dbus-send命令，可以使用：

    dbus-send --session --print-reply --type=method_call --dest=org.freedesktop.Notifications / org.freedesktop.DBus.Introspectable.Introspect

    file:demo/synsendm.c

*** 异步的例子
    异步中，程序将不等返回消息，继续执行，等有返回消息的时候，触发一个回调函数。下面是同样的操作，但是用异步的方式来实现：
    file:demo/asynsendm.c

** Signal的收发小例子
*** 发送方的小程序
    file:demo/signalsend.c
*** 希望接收该信号的小程序例子
    file:demo/signalrecv.c
** Method的收发小例子
*** 监听Method call消息，并返回Method reply消息
    Method的监听和signal的监听的处理时一样，介是信号是不需要答复，而Method需要。 在下面的例子中，我们将学习如何在消息中加入多个参数的情况。
    file:demo/methodrecv.c
*** 发送Method call消息，并等待Method reply消息
    file:demo/methodsend.c
** 编写自己的接口
   dbus-glib是dbus底层接口的一个封装。我们用dbus-glib做一个dus接口，并写一个客户程序。
   首先编写接口描述文件。
   file:demo/interface/smss.xml
   我们要在连接"org.freesmartphone.ogsmd"中实现对象"/org/freesmartphone/GSM/Device"。这个对象有接口"org.freesmartphone.GSM.SMS"。这个接口有一个SendMessage方法和一个IncomingMessage信号。

   SendMessage方法和IncomingMessage信号除了两个字符串参数外，还有一个a{sv}参数，这是一个哈希表，即python的字典。键-值对的键类型是字符串，值类型是VARIANT。这个接口是openmoko fso接口的一部分。但为简单起见，本例在哈希表部分，只用三个键值。
     - 键"alphabet"对应的值类型是字符串。
     - 键"csm_num"对应的值类型是INT32。
     - 键"csm_seq"对应的值类型是INT32。
       
   请注意方法和信号名应采用单词连写，首字母大写的格式。

   由接口描述文件生成绑定文件

   有一个叫dbus-binding-tool的工具，它读入接口描述文件，产生一个绑定文件。这个文件包含了dbus对象的接口信息。在主程序中我们通过dbus_g_object_type_install_info函数向dbus-glib登记对象信息（DBusGObjectInfo结构）。
   命令如下：
   dbus-binding-tool --prefix=gsm_sms --mode=glib-server --output=smss-glue.h smss.xml
   
   "--prefix"参数定义了对象前缀。设对象前缀是$(prefix)，则生成的DBusGObjectInfo结构变量名就是dbus_glib_$(prefix)_object_info。绑定文件会为接口方法定义回调函数。回调函数的名称是这样的：首先将xml中的方法名称转换到全部小写，下划线分隔的格式，然后增加前缀"$(prefix)_"。例如：如果xml中有方法SendMessage，绑定文件就会引用一个名称为$(prefix)_send_message的函数。
   绑定文件还会为接口方法生成用于散集（Unmarshaling）的函数。在dbus消息中，方法参数是以流格式存在的。该函数将方法参数由数据流还原到glib的数据格式，并传入方法的回调函数。本例中，dbus-binding-tool生成以下的smss-glue.h：
   file:demo/interface/smss-glue.h

   在包含绑定文件前，我们必须声明绑定文件要引用的回调函数。

   对象：对象定义
   
   dbus-glib用GObject实现dbus对象。所以我们首先要实现一个对象。在本例中，我们实现一个GsmSms对象，它继承了GObject：
   file:demo/interface/gsm_sms.h
 
   GObject的对象定义虽然繁琐，但有固定的套路。依样画葫芦，画多了就习惯了。我们在gsm_sms.h中声明了gsm_sms_send_message函数。 gsm_sms_send_message函数是在gsm_sms.c中实现的，在绑定文件smss-glue.h中用到。因为主程序要使用绑定文件中的对象信息，所以应由主程序包含绑定文件。主程序只要在包含绑定文件前包含gsm_sms.h，编译器就不会抱怨gsm_sms_send_message函数未声明。
   
   信号的列集函数

   列集（Marshaling）是将数据从某种格式存为流格式的操作；散集（Unmarshaling）则是列集的反操作，将信息从流格式中还原出来。在绑定文件中，dbus-binding-tool自动生成函数将方法参数从dbus消息中还原出来，即实现了散集。那么我们怎么把信号参数由glib的数据结构转换到消息中的数据流呢？

   因为GsmSms对象有一个信号，所以在对象类初始化函数gsm_sms_class_init中，我们要调用g_signal_new创建信号。 g_signal_new要求我们提供一个列集函数。

   glib有一些标准的列集函数，在gmarshal.h中定义。例如g_cclosure_marshal_VOID__STRING，这个函数适合只有一个字符串参数的信号。如果gmarshal.h没有提供适合的列集函数，我们可以用一个叫glib-genmarshal的工具自动生成列集函数。后面我们会看到，无论是标准列集函数还是生成的列集函数都是既可以用于列集也可以用于散集，这些函数通常都被称作列集函数。

   使用glib-genmarshal前，我们同样要准备一个输入文件：
   file:demo/interface/sms-marshal.list
   我们需要的函数返回类型是VOID，参数是STRING,STRING,BOXED
   
   glib-genmarshal --header sms-marshal.list --prefix=sms_marshal > sms-marshal.h

   glib-genmarshal --body sms-marshal.list --prefix=sms_marshal > sms-marshal.c

   file:demo/interface/sms-marshal.h
   file:demo/interface/sms-marshal.c

   对像实现
   
   准备好列集函数后，我们来实现GsmSms
   file:demo/interface/gsm_sms.c

   在主程序中登记对象信息时，对象信息把SendMessage方法和gsm_sms_send_message函数以及自动生成的散集函数联系起来。当客户程序调用SendMessage方法时，dbus-glib会通过对象信息表格找到回调函数和散集函数，用散集函数从method_call消息中取出参数传入回调函数gsm_sms_send_message。 gsm_sms_send_message调用sms_show_features函数处理a{sv}参数。 sms_show_features也在sms_features模块定义，后面会介绍。

   gsm_sms模块提供了一个gsm_sms_emit_incoming_message函数供外部模块调用。调用这个函数可以发射一个信号。在真实环境中，只有外部事件发生后才会发射信号。本例中会有测试代码发射信号。

   主程序

   登记dbus服务服务器
   file:demo/interface/smss.c

   IO Channel

   我想增加一个敲键测试信号发射。但我又必须在glib主循环里等待dbus消息。怎样才能既等待dbus消息，又等待敲键呢？这种情况可以使用glib的IO Channels。glib的IO Channels允许我们在glib主循环等待指定的文件或socket句柄。

   要使用IO Channels，首先包含"glib/giochannel.h"。用句柄0（即标准输入）创建一个GIOChannel。 为我们创建的GIOChannel登记回调函数。我们在回调函数channel_cb中处理敲键，发射信号。

   CLIENT
   file:demo/interface/smsc.c
* Write by myself
** send a struct with dbus for C/S
   第一步：定义一个通用的API xml接口描述，暂为dbus_general.xml
   file:demo/sendstruct/dbus_general.xml
   第二步：用dbus的工具函数生成stub/proxy头文件，这一步写到Makefile脚本中，以后不用修改了;
   dbus-binding-tool --mode=glib-server --prefix=your_module_name dbus_general.xml > general_stub.h
   dbus-binding-tool --mode=glib-client --prefix=your_module_name dbus_general.xml > general_proxy.h
   
   file:demo/sendstruct/general_proxy.h
   file:demo/sendstruct/general_stub.h
   

   第二点五步，定义对象，实现接口
   file:demo/sendstruct/gen_marshal.list
   file:demo/sendstruct/gen-marshal.h
   第三步：实现client侧，主要是调用general_proxy.h的接口函数client_request()，用GArray传入你的数组（可以携带任何你自己定义的数据结构）
   file:demo/sendstruct/client.c
   
   第四步：实现Server侧，主要是实现general_stub.h中的函数__client_request_cb();
   file:demo/sendstruct/server.c

** simple send struct
   首先定义函数接口
   file:demo/simplestruct/sr_stream.xml
   
   生成头文件
   dbus-binding-tool --prefix=webpad --mode=glib-server sr_stream.xml > sr_stream_server.h
   
   定义与实现对象
   头文件: file:demo/simplestruct/webpad.h
   .c文件: file:demo/simplestruct/webpad.c

   定义通用结构体
   file:demo/simplestruct/server.h

   服务器端
   file:demo/simplestruct/server.c

   客户端
   file:demo/simplestruct/client.c
* Reference
