P:    回顾一下练习2.1-3中提出的查找问题，注意如果序列A是已排序的(递增)，就可以将序列的中点与v进行比较。根据比较的结果，原序列中有一半就可以不用再做进一步的考虑了。二分查找(binary search)就是一个不断重复这一查找过程的算法，它每次都将序列余下的部分分成两半，并只对其中的一半做进一步的查找。写出二分查找算法的伪代码，可以是迭代的，也可以是递归的。说明二分查找算法的最坏情况运行时间为什么O(lgn)。

迭代的：
BINARY_SEARCH(A, v)
l <- 1                                  1
r <- n                                  1
while l < r                             lgn
do q <- floor((l+r)/2)                  lgn-1
   if A[q] = v		                lgn-1
      then return q	                
      else if A[q]>v	                lgn-1
              then r <- q-1             
      else l <- q+1                     lgn-1
return NIL                              1


T(n) = O(lgn)

递归的：
循环不变式A[p..q]可能有与v相等的元素
BS(A, p, q)
if p>q                                  1
then retrun NIL                         1
r <- floor((p+q)/2)                     1
if A[q] = v		                1
   then ret <-q                         1
   else if A[q]>v	                1
           then r <- q-1                1
                ret <- BS(A, r+1, q)    T(n/2) 注意，分支只运行一次
   else l <- q+1                        1
        ret <- BS(A, l, q)              T(n/2) 注意，分支只运行一次
return ret                              1

T(n) = T(n/2) + c 令 n=2^m，则 m=lgn
==> T(2^m) = t(1)mc = mc ==> T(n) = clgn = O(lgn)
