Introduction to Algorithms Second Edition
* 第二章 算法入门
** 2.1 插入排序
*** 2.1-2 
    重写过程 INSERTION-SORT，使之按非升序（而不是按非降序）排序。
    file:excise/2.1-2.txt
*** 2.1-3 
    考虑下面的查找总题：
    输入：一列数 A = <a1,a2,...,an>和一个值v
    输出：下标i，使得v=A[i],或者当v不在A中出现时为NIL。
    写出针对这个问题的线性查找的伪代码，它顺序地扫描整个序列以查找v。利用循环不变式证明算法的正确性。确保所给出的循环不变式满足三个必要的性质。
    file:excise/2.1-3.txt
*** 2.1-4
    有两个各存放在数组A和B中的n位二进制整数，考虑它们相加的问题。两个整数的和以二进制形式存放在具有(n+1)个元素的数组中。请给出这个问题的形式化描述，并写出伪代码。
    file:excise/2.1-4.txt
** 2.2 算法分析
*** 2.2-2 
    考虑对数组A中的n个数进行排序的问题：首先找出A中的最小元素，并将其与A[1]中的元素进行交换。接着，找出A中的次最小元素，并将其与A[2]中的元素进行交换。对A中头n-1个元素继续这一过程。写出这个算法的伪代码，该算法称为选择排序 (selection sort)。对这个算法来说，循环不变式是什么？为什么它仅需要在头n-1个元素上运行，而不是在所有n个元素上运行？O形式说明最好、最坏运行时间。
    file:excise/2.2-2.txt
*** 2.2-3 
    再次考虑线性查找问题 (见练习2.1-3)。在平均情况下，需要检查输入序列中的多少个元素？假定待查找的元素是数组中任何一个元素的可能性是相等的。在最坏情况下又怎样呢？O形式说明最好、最坏运行时间。
    file:excise/2.2-3.txt
*** 2.2-4
    应如何修改任何一个算法，才能使之具有较好的最佳情况运行时间？
    修改一个算法，检查它的输入是否符合某个特殊的条件，如果符合，可以直接给出预先算好的答案。
** 2.3 算法设计
*** 2.3-2
    改写 MERGE 过程，使之不使用哨兵元素，而是在一旦数组L或R中的所有元素都被复制回数组A后，就立即停止，再将另一个数组中余下的元素复制回数组A中。
    file:excise/2.3-2.txt
*** 2.3-4
    插入排序可以如下改写成一个递归过程：为排序A[1..n]，先递归地排序A[1..n-1]，然后再将A[n]插入到已排序的数组A[1..n-1]中去。对于插入排序的这一递归版本，为它的运行时间写一个递归式。
    file:excise/2.3-4.txt
*** 2.3-5
    回顾一下练习2.1-3中提出的查找问题，注意如果序列A是已排序的，就可以将序列的中点与v进行比较。根据比较的结果，原序列中有一半就可以不用再做进一步的考虑了。二分查找(binary search)就是一个不断重复这一查找过程的算法，它每次都将序列余下的部分分成两半，并只对其中的一半做进一步的查找。写出二分查找算法的伪代码，可以是迭代的，也可以是递归的。说明二分查找算法的最坏情况运行时间为什么O(lgn)。
    file:excise/2.3-5.txt
*** 2.3-6
    观察一下2.1节中给出的 INSERTION-SORT 过程，在第5～7行的 while 循环中，采用了一种线性查找策略，在已排序的数组A[1..j-1]中（反向）扫描。是否可以改用二分查找策略（（见练习2.3-5），来将插入排序的总休最坏情况运行时间改善至O(nlgn)
    file:excise/2.3-6.txt
*** 2.3-7
    请给出一个运行时间为O(nlgn)的算法，使之能在给定一个由n个整数构成的集合S和另一个整数x时，判断出S中是否存在有两个其和等于x的元素。
    file:excise/2.3-7.txt

* 第六章 堆排序
** 6.2 保持堆的性质
*** 6.2-2 
    由过程MAX-HEAPIFY开始，写出进行对应的最小堆操作的 MIN-HEAPIFY(A, i) 过程的伪代码，并比较 MIN-HEAPIFY 与 MAX-HEAPIFY 的运行时间。
    file:excise/6.2-2.txt
*** 6.2-5
    MAX-HEAPIFY 的代码效率较高，但第10行中的递归调用可能例外，它可使某些编译程序产生出低效的代码。请用迭代的控制结构（循环）取代递归结构，从而写一个更为高效的 MAX-HEAPIFY。
    file:excise/6.2-5.txt
*** 6.2-6
    证明：对一个大小为n的堆， MAX-HEAPIFY 的最坏运行时间为Ω(lgn)。
    file:excise/6.2-6.txt
** 6.5 优先级队列
*** 6.5-3
    使用最小堆实现最小优先级队列，用伪代码写出 HEAP-MINIMUM, HEAP-EXTRACT-MIN, HEAP-DECREASE-KEY 和 MIN-HEAP-INSERT 过程。
*** 6.5-5
    使用以下的循环不变式来论证 HEAP-INCREASE-KEY 的正确性：
    在第4～6行while循环的每次迭找之初，数组 A[1..heap-size[A]] 满足最大堆性质，除了一个可能的例外： A[i]可能大于 A[PARENT(i)]。
*** 6.5-6
    说明使用优先级队列来实现一个先进先出队列，另请说明如何用优先级队列来实现栈。
*** 6.5-7
    HEAP－DELEETE(A, i)操作将结点i中的项从堆A中删去。对含n个元素的最大堆，请给出时间为O(lgn)的 HEAP-DELETE 的实现。
*** 6.5.8
    请给出一个时间为O(nlgk)、用来将k个已排序链表合并为一个排序链表的算法。此处n为所有输入链表中元素的总数。（提示：用一个最小堆来做k路合并）

* 第十一章 散列表
** 11.1 直接寻址表
*** 11.1-1
    考虑由一个长度为m的直接寻址表T表示的动态集合S。给出一个查找S的最大元素的算法过程。所给的过程在最坏的情况下的运行时间是什么？
    file:excise/11.1-1.txt
*** 11.1-2
    位向量(bit vector)是一种仅包含0和1的数组。长度为m的位向量所占空间要
    比包含m个指针的数组少得多。请说明如何用一个位向量来表示一个包含不同
    元素（无卫星数据）的动态集合。字典操作的运行时间应是O(1)。
    file:excise/11.1-2.txt
* 第三十二章 字符串匹配
** 32.2 Rabin-Karp 算法
*** 32.2-1
    如果取模 q=11, 那么当 Rabin-Karp 匹配算法在文本 T=3141592653589793 中搜寻模式 P=26 时，会遇到多少个伪命中点？
    file:excise/31.2-2.txt
    file:excise/31.2-2.R
* 算法面试题
* tree code
** standard tree
   file:datastruct/bintree.c
* hackerrank
  file:demo/hackerrank/string_similarity/string_similarity.org
  file:demo/hackerrank/substring_diff/substring_diff.org
  file:demo/hackerrank/botclean_partially_observable/bpo.org
  file:demo/hackerrank/botclean/botclean.org
  file:demo/hackerrank/bot_saves_princess/bsp.org
  file:demo/hackerrank/bot_saves_princess2/bsp2.org
