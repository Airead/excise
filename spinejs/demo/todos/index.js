// Generated by CoffeeScript 1.7.1
(function() {
  var $, Task, TaskApp, Tasks,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $ = jQuery;

  Task = (function(_super) {
    __extends(Task, _super);

    function Task() {
      return Task.__super__.constructor.apply(this, arguments);
    }

    Task.configure('Task', 'name', 'done');

    return Task;

  })(Spine.Model);

  Tasks = (function(_super) {
    __extends(Tasks, _super);

    Tasks.prototype.events = {
      'change input[type=checkbox]': 'toggle',
      'click .destroy': 'remove',
      'dblclick .view': 'edit',
      'keypress input[type=text]': 'blurOnEnter',
      'blur input[type=text]': 'close'
    };

    Tasks.prototype.elements = {
      'input[type=text]': 'input'
    };

    function Tasks() {
      this.render = __bind(this.render, this);
      Tasks.__super__.constructor.apply(this, arguments);
      this.item.bind('update', this.render);
      this.item.bind('destroy', this.release);
    }

    Tasks.prototype.render = function() {
      var template;
      console.log('render');
      template = '<div class="item {{#done}}done{{/done}}">\n    <div class="view" title="Double click to edit...">\n        <input type="checkbox" {{#done}}checked="checked"{{/done}} >\n        <span>{{name}}</span> <a class="destroy"></a>\n    </div>\n\n    <div class="edit">\n        <input type="text" value="{{name}}">\n    </div>\n</div>';
      this.replace(Mustache.render(template, this.item));
      return this;
    };

    Tasks.prototype.toggle = function() {
      this.item.done = !this.item.done;
      return this.item.save();
    };

    Tasks.prototype.remove = function() {
      console.log('remove');
      this.item.destroy();
      return console.log('records', this.item.constructor.records);
    };

    Tasks.prototype.edit = function() {
      console.log('edit');
      this.$el.addClass('editing');
      return this.input.focus();
    };

    Tasks.prototype.blurOnEnter = function(e) {
      if (e.keyCode === 13) {
        return e.target.blur();
      }
    };

    Tasks.prototype.close = function() {
      this.$el.removeClass('editing');
      return this.item.updateAttributes({
        name: this.input.val()
      });
    };

    return Tasks;

  })(Spine.Controller);

  TaskApp = (function(_super) {
    __extends(TaskApp, _super);

    TaskApp.prototype.events = {
      'submit form': 'create'
    };

    TaskApp.prototype.elements = {
      '.items': 'items',
      'form input': 'input'
    };

    function TaskApp() {
      this.addOne = __bind(this.addOne, this);
      TaskApp.__super__.constructor.apply(this, arguments);
      Task.bind('create', this.addOne);
      Task.fetch();
    }

    TaskApp.prototype.addOne = function(task) {
      var view;
      console.log('add task', task);
      view = new Tasks({
        item: task
      });
      return this.items.append(view.render().el);
    };

    TaskApp.prototype.create = function(e) {
      e.preventDefault();
      Task.create({
        name: this.input.val()
      });
      console.log('Task', Task.records);
      return this.input.val('');
    };

    return TaskApp;

  })(Spine.Controller);

  $(function() {
    return window.app = new TaskApp({
      el: $('#tasks')
    });
  });

}).call(this);

//# sourceMappingURL=index.map
