learning conntrack
* nf conntrack init flow
** nf_conntrack_net_init()
*** nf_conntrack_init()
**** nf_conntrack_init_init_net()
     1. 算出 nf_conntrack_htable_size and nf_conntrack_max
     2. call init function
     3. configure nf_conntrack_untracked
***** nf_conntrack_proto_init();
      1. 注册一个 l4 通用协议
      2. 为 nf_ct_l3protos 分配一个默认的 nf_conntrack_l3proto_generic
****** nf_ct_l4proto_register_sysctl(&nf_conntrack_l4proto_generic);
******* nf_ct_register_sysctl()
        into kernel/sysctl.c
******** register_sysctl_paths(path, table);
***** nf_conntrack_helper_init();
****** void *nf_ct_alloc_hashtable(unsigned int *sizep, int *vmalloced, int nulls)
       1. 算出 \*sizep, 为 PAGE_SIZE / sizeof(struct hlist_nulls_head) 的整数倍
       2. get free pages, __get_free_pages()
****** int nf_ct_extend_register(struct nf_ct_ext_type *type)
******* update_alloc_size(type);
**** nf_conntrack_init_net()
     1. 为每个cpu分配 struct ip_conntrack_stat
     2. 设置 slab name
     3. 创建 kmem_cache
***** alloc_percpu(struct ip_conntrack_stat);
***** kmem_cache_create()
***** nf_ct_alloc_hashtable()
***** nf_conntrack_expect_init(net);
      1. 算出 nf_conntrack_except_hsize
      2. create hash table by kmem_cache_create()
      3. generate proc files
***** nf_conntrack_acct_init(net);
****** nf_ct_extend_register(&acct_extend);
******* nf_conntrack_acct_init_sysctl(net);
******** register_net_sysctl_table();
***** nf_conntrack_ecache_init(net);
****** nf_ct_extend_register(&event_extend);
******* nf_conntrack_event_init_sysctl(net);
******** register_net_sysctl_table();
**** 分配二个函数指针, 清空一个函数指针
     /* For use by REJECT target */
     rcu_assign_pointer(ip_ct_attach, nf_conntrack_attach);
     rcu_assign_pointer(nf_ct_destroy, destroy_conntrack);
     
     /* Howto get NAT offsets */
     rcu_assign_pointer(nf_ct_nat_offset, NULL);
*** nf_conntrack_standalone_init_proc()
*** nf_conntrack_standalone_init_sysctl()
** register_pernet_subsys()
   register_pernet_subsys - register a network namespace subsystem
*** register_pernet_operations(first_device, ops);
    static struct list_head *first_device = &pernet_list;

* nf conntrack l3 proto ipv4
** static int __init nf_conntrack_l3proto_ipv4_init(void)
*** void need_conntrack(void)
*** void nf_defrag_ipv4_enable(void)
*** nf_register_sockopt(&so_getorigdst);
*** nf_conntrack_l4proto_register(&nf_conntrack_l4proto_tcp4);
*** nf_conntrack_l4proto_register(&nf_conntrack_l4proto_udp4);
*** nf_conntrack_l4proto_register(&nf_conntrack_l4proto_icmp);
*** nf_conntrack_l3proto_register(&nf_conntrack_l3proto_ipv4);
*** int nf_register_hooks(struct nf_hook_ops *reg, unsigned int n)
*** nf_conntrack_ipv4_compat_init();
** registered four hook function
*** ipv4_conntrack_in() at NF_INET_PRE_ROUTING
**** nf_conntrack_in(dev_net(in), PF_INET, hooknum, skb);
*** ipv4_conntrack_local() at NF_INET_LOCAL_OUT
**** nf_conntrack_in(dev_net(out), PF_INET, hooknum, skb);
*** ipv4_conntrack_confirm() at NF_INET_POST_ROUTING
**** call skb->ct->help->helper()
**** adjust seqs for loopback traffic only in outgoing direction
**** nf_conntrack_confirm(skb)
*** ipv4_conntrack_confirm() at NF_INET_LOCAL_IN
* nf_conntrack_in (net/netfilter/nf_conntrack_core.c)
** l3proto->get_l4proto()
** l4proto = __nf_ct_l4proto_find(pf, protonum);
** l4proto->error(net, skb, dataoff, &ctinfo, pf, hooknum);
** ct = resolve_normal_ct(net, skb, dataoff, pf, protonum,
** l4proto->packet(ct, skb, dataoff, ctinfo, pf, hooknum);
** nf_conntrack_event_cache(IPCT_STATUS, ct);
* nf_conntrack_confirm(struct sk_buff *skb)
** nf_ct_is_untracked()
** nf_ct_is_confirmed()
** __nf_conntrack_confirm()
** nf_ct_deliver_cached_events(ct);
